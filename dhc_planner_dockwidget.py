# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DHCPlannerDockWidget
                                 A QGIS plugin
 automatically creates DHCs within a selection
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-11-14
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Felix Lewandowski, HAW-Hamburg
        email                : felix.lewandowski@haw-hamburg.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from time import sleep

from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.core import Qgis
from qgis.core import QgsMessageLog
from .config import Config
from .logger import Logger
from .dhc_creation_pipeline_factory import DHCCreationPipelineFactory

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'dhc_planner_dockwidget_base.ui'))
# ToDo: to here------------


class DHCPlannerDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(DHCPlannerDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.start_calculation_button.clicked.connect(self.start_calculation)


    def start_calculation(self):
        config = Config()
        logger = Logger()
        QgsMessageLog.logMessage("Starting...", level=Qgis.Info)
        logger.info("Starting...")
        pipeline = DHCCreationPipelineFactory().create_pipeline()
        pipeline.start()

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
